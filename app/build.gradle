plugins{
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'com.google.dagger.hilt.android'
}

android {
    namespace 'com.example.mytemplate'
    compileSdk ConfigData.sdk

    defaultConfig {
        applicationId "com.example.mytemplate"
        minSdk ConfigData.minSdk
        targetSdk ConfigData.targetSdk
        versionCode ConfigData.versionCode
        versionName ConfigData.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug{
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            buildConfigField "String", "SERVER_URL", ConfigData.baseUrlDev
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            buildConfigField "String", "SERVER_URL", ConfigData.baseUrlProd
        }
    }
    flavorDimensions "version"
    productFlavors {
        demo {
            // Assigns this product flavor to the "version" flavor dimension.
            // If you are using only one dimension, this property is optional,
            // and the plugin automatically assigns all the module's flavors to
            // that dimension.
            dimension "version"
            applicationIdSuffix ".demo"
        }
        full {
            dimension "version"
        }
    }
    dataBinding {
        enabled true
    }
    viewBinding {
        enabled true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = ConfigData.kotlinJvmTarget
    }
    kapt{
        includeCompileClasspath false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    api project(":core")

    // android libs
    implementation(Dependencies.androidSupport)

    // hilt
    implementation(Dependencies.Hilt)
    implementation(Dependencies.HiltActivity)
    implementation(Dependencies.HiltFragment)
    implementation(Dependencies.HiltViewModelCompiler)
    kapt(Dependencies.HiltCompiler)

    // room database
    implementation(Dependencies.RoomRuntime)
    kapt(Dependencies.RoomCompiler)

    // lifecycle
    implementation(Dependencies.LifecycleLiveData)
    implementation(Dependencies.LifecycleViewModel)

    // unit testing
    testImplementation(Dependencies.jUnitAndroidx)
    testImplementation(Dependencies.jUnit)
    testImplementation(Dependencies.mockito)
    testImplementation(Dependencies.coreTesting)
    testImplementation(Dependencies.truth)
    testImplementation(Dependencies.hiltTesting)
    androidTestImplementation(Dependencies.hiltTesting)
    kaptTest(Dependencies.hiltCompilerTesting)

    // parceler
    implementation(Dependencies.ParcelerApi)
    kapt(Dependencies.Parceler)
}

kapt {
    correctErrorTypes true
}
